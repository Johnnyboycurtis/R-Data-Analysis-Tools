nbc <- function(x, ...)
UseMethod("nbc")
library(dplyr)
nbc <- function(x, y){
call <- match.call()
a_priori <- table(y) #/length(y)
x <- as.data.frame(x)
## estimation-function for conditional probabilities
cond_probs <- function(var)
if (is.numeric(var)) {
mu_sigma = cbind(
tapply(var, y, mean, na.rm = TRUE),
tapply(var, y, sd, na.rm = TRUE)
)
colnames(mu_sigma) <- c("mean", "sd")
return(mu_sigma)
} else {
tab <- table(y, var)
return(tab / rowSums(tab))
}
## create tables
cond_prob_tables <- lapply(X = x, FUN = cond_probs)
#return(list(apriori = a_priori, tables = cond_prob_tables))
structure(list(apriori = a_priori,
tables = cond_prob_tables,
levels = levels(y),
call   = call ),
class = "nbc" )
}
print.nbc <- function(x, ...) {
cat("\nNaive Bayes Classifier for Discrete Predictors\n\n")
cat("Call:\n")
print(x$call)
cat("\nA-priori probabilities:\n")
print(x$apriori / sum(x$apriori))
cat("\nConditional probabilities:\n")
for (i in x$tables) {print(i); cat("\n")}
}
data(mtcars)
df = mtcars
df$cyl <- as.factor(df$cyl)
df$vs <- as.factor(df$vs)
df$am <- as.factor(df$am)
df$gear <- as.factor(df$gear)
df$carb <- as.factor(df$carb)
str(df)
fit = nbc(x = df[, colnames(df) != "am"], y = df$am)
fit
fit$tables
fit$apriori
fit$levels
fit$tables[[1]]
class(fit$tables[[1]])
df
str(df)
colnames(df)
class(fit$tables[[1]])
fit$tables[[1]]
names(fit$tables)
predict.nbc <- function(model, new_x){
apriori = as.matrix(model$apriori) ## apriori counts
cols = names(model$tables) ## list of names of cond probs
msd = model$tables ## list of cond probs
a = log(apriori/sum(apriori)) ## log apriori probs
new_x = as.data.frame(new_x)
densities = function(name){
## takes name of column to use
dat = new_x[name] ## gets column from new data.frame
prob = sapply(dat, function(v) dnorm(x = v, mean = msd[[name]][,1], sd = msd[[name]][,2])) ## function to calculate densities
return(prob)
}
result = sapply(X = cols, FUN = densities)
print(result)
#b = log(probs)
#L = apply(X = b, MARGIN = 2, FUN = function(v) a + v)
#results <- apply(X = L, MARGIN = 2, function(x){
#                 sapply(x, function(lp){ 1/sum(exp(x - lp)) }) ## numerically stable
#})
#return(results)
}
predict(fit)
predict(fit, new_x = df[, colnames(df) != "am"])
msd = fit$tables
msd
names(msd)
sapply(names(msd), print)
predict(fit, new_x = df[, colnames(df) != "am"])
sapply(names(msd), function(name) msd[[name]])
